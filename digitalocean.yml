- hosts: localhost
  vars:
    droplet_size: s-1vcpu-1gb
    droplet_region: lon1
    droplet_image: ubuntu-20-04-x64
    droplet_name: test
  tasks:
    - name: "add public ssh key to digitalocean account"
      digital_ocean_sshkey:
        name: "MacBook Pro"
        ssh_pub_key: "{{lookup('file', '~/.ssh/id_rsa.pub') }}"
        state: present
      register: sshkey_result

    - name: create droplet
      digital_ocean_droplet:
        name: "{{ droplet_name }}"
        size: "{{ droplet_size }}"
        region: "{{ droplet_region }}"
        image: "{{ droplet_image }}"
        wait_timeout: 600
        unique_name: yes
        ssh_keys: ["{{ sshkey_result.data.ssh_key.id }}"]
        state: present
      register: droplet_result

    - name: get IP address of new droplet
      set_fact:
        droplet_ip: "{{ (droplet_result.data.droplet.networks.v4 | selectattr('type', 'equalto', 'public')).0.ip_address }}"

    - name: wait for port 22 to become available on droplet
      wait_for:
        host: "{{ droplet_ip }}"
        port: 22

    - name: add hosts
      add_host:
        name: "{{ droplet_ip }}"
        groups: "droplets"

- hosts: droplets
  remote_user: root
  vars:
    app_user: deploy
  tasks:
    - name: install packages
      apt:
        name:
          - nginx
          - postgresql
          - postgresql-contrib
          - git
        update_cache: true

    - name: add the deploy user
      ansible.builtin.user:
        name: "{{ app_user }}"
        ssh_key_file: .ssh/id_rsa
        shell: /bin/bash

    - name: Install dependencies for compiling Ruby and gems
      apt: name={{ item }}
      with_items:
        - autoconf
        - bison
        - build-essential
        - libssl-dev
        - libyaml-dev
        - libreadline6-dev
        - zlib1g-dev
        - libncurses5-dev
        - libffi-dev
        - libgdbm6
        - libgdbm-dev
        - libpq-dev

    - name: clone rbenv repository
      git: repo=https://github.com/rbenv/rbenv.git
        dest=~{{ app_user }}/.rbenv
        update=no

    - name: set correct owner and group on rbenv
      file: path=~{{ app_user }}/.rbenv
        owner={{ app_user }}
        group={{ app_user }}
        recurse=yes

    - name: install rbenv loader script
      copy: src=rbenv.sh
        dest=/etc/profile.d/rbenv.sh

    - name: clone ruby-build, installed as rbenv plugin
      git: repo=https://github.com/rbenv/ruby-build.git
        dest=~{{ app_user }}/.rbenv/plugins/ruby-build
        update=no

    - name: set correct owner and group on ruby-build
      file: path=~{{ app_user }}/.rbenv/plugins/ruby-build
        owner={{ app_user }}
        group={{ app_user }}
        recurse=yes

    - name: close rbenv-vars, installed as rbenv plugin
      git: repo=https://github.com/rbenv/rbenv-vars.git
        dest=~{{ app_user }}/.rbenv/plugins/rbenv-vars
        update=no

    - name: clone nodenv repo
      git:
        repo: https://github.com/nodenv/nodenv.git
        dest: ~{{ app_user }}/.nodenv

    - name: set correct owner and gorup on nodenv
      file: path=~{{ app_user }}/.nodenv
        owner={{ app_user }}
        group={{ app_user }}
        recurse=yes

    - name: install nodenv loader script
      copy: src=nodenv.sh
        dest=/etc/profile.d/nodenv.sh

    - name: install node-build, installed as nodenv plugin
      git:
        repo: https://github.com/nodenv/node-build.git
        dest: "~{{ app_user }}/.nodenv/plugins/node-build"
